case 0x00: i_nop(); break; //NOP
case 0x01: i_nop(); break;
case 0x02: i_nop(); break;
case 0x03: i_nop(); break;
case 0x04: i_nop(); break;
case 0x05: i_dec(B_p, 1); break; //DEC B
case 0x06: i_ld_n(B_p); break; //LD B,d8
case 0x07: i_rlca(); break; //RLCA
case 0x08: i_nop(); break;
case 0x09: i_nop(); break;
case 0x0A: i_nop(); break;
case 0x0B: i_nop(); break;
case 0x0C: i_inc_n(C_p); break; //INC C
case 0x0D: i_nop(); break;
case 0x0E: i_ld_n(C_p); break; //LD C,d8
case 0x0F: i_nop(); break;
case 0x10: i_stop(); break; //STOP
case 0x11: i_ld_nn(DE_p); break; //LD DE,d16
case 0x12: i_nop(); break;
case 0x13: i_inc(DE_p, 2); break; //INC DE
case 0x14: i_halt(); break; //HALT
case 0x15: i_nop(); break;
case 0x16: i_nop(); break;
case 0x17: i_rla(); break; //RLA
case 0x18: PC += fetch(1).b1; //JR n
case 0x19: i_nop(); break;
case 0x1A: i_ld_a(DE_p, 2); break; //LD A,(DE)
case 0x1B: i_nop(); break;
case 0x1C: i_nop(); break;
case 0x1D: i_nop(); break;
case 0x1E: i_nop(); break;
case 0x1F: i_nop(); break;
case 0x20: {u8 v = fetch(1).b1; if (C_NZ) PC += v;}; break; //JR NZ,r8
case 0x21: i_ld_nn(HL_p); break; //LD HL,d16
case 0x22: i_ldi_hl(); break; //LD (HL+),A
case 0x23: i_inc(HL_p, 2); break; //INC HL
case 0x24: i_nop(); break;
case 0x25: i_nop(); break;
case 0x26: i_nop(); break;
case 0x27: i_nop(); break;
case 0x28: i_nop(); break;
case 0x29: i_nop(); break;
case 0x2A: i_nop(); break;
case 0x2B: i_nop(); break;
case 0x2C: i_nop(); break;
case 0x2D: i_nop(); break;
case 0x2E: i_nop(); break;
case 0x2F: i_cpl(); break; //CPL
case 0x30: i_nop(); break;
case 0x31: i_ld_nn(SP_p); break; //LD SP,d16
case 0x32: i_ldi_hl(); break; //LD (HL-),A
case 0x33: i_nop(); break;
case 0x34: i_nop(); break;
case 0x35: i_nop(); break;
case 0x36: i_nop(); break;
case 0x37: i_nop(); break;
case 0x38: i_nop(); break;
case 0x39: i_nop(); break;
case 0x3A: i_nop(); break;
case 0x3B: i_nop(); break;
case 0x3C: i_nop(); break;
case 0x3D: i_nop(); break;
case 0x3E: i_ld_n(A_p); break; //LD A,d8
case 0x3F: i_ccf(); break; //CCF
case 0x40: i_ld_rtor(B_p, B_p, 1, 1); break; //LD B, B
case 0x41: i_ld_rtor(B_p, C_p, 1, 1); break; //LD B, C
case 0x42: i_ld_rtor(B_p, D_p, 1, 1); break; //LD B, D
case 0x43: i_ld_rtor(B_p, E_p, 1, 1); break; //LD B, E
case 0x44: i_ld_rtor(B_p, H_p, 1, 1); break; //LD B, H
case 0x45: i_ld_rtor(B_p, L_p, 1, 1); break; //LD B, L
case 0x46: i_ld_rtor(B_p, HL_p, 1, 2); break; //LD B, (HL)
case 0x47: i_ld_rtor(B_p, A_p, 1, 1); break; //LD B, A
case 0x48: i_ld_rtor(C_p, B_p, 1, 1); break; //LD C, B
case 0x49: i_ld_rtor(C_p, C_p, 1, 1); break; //LD C, C
case 0x4A: i_ld_rtor(C_p, D_p, 1, 1); break; //LD C, D
case 0x4B: i_ld_rtor(C_p, E_p, 1, 1); break; //LD C, E
case 0x4C: i_ld_rtor(C_p, H_p, 1, 1); break; //LD C, H
case 0x4D: i_ld_rtor(C_p, L_p, 1, 1); break; //LD C, L
case 0x4E: i_ld_rtor(C_p, HL_p, 1, 2); break; //LD C, (HL)
case 0x4F: i_ld_rtor(C_p, A_p, 1, 1); break; //LD C, A
case 0x50: i_ld_rtor(D_p, B_p, 1, 1); break; //LD D, B
case 0x51: i_ld_rtor(D_p, C_p, 1, 1); break; //LD D, C
case 0x52: i_ld_rtor(D_p, D_p, 1, 1); break; //LD D, D
case 0x53: i_ld_rtor(D_p, E_p, 1, 1); break; //LD D, E
case 0x54: i_ld_rtor(D_p, H_p, 1, 1); break; //LD D, H
case 0x55: i_ld_rtor(D_p, L_p, 1, 1); break; //LD D, L
case 0x56: i_ld_rtor(D_p, HL_p, 1, 2); break; //LD D, (HL)
case 0x57: i_ld_rtor(D_p, A_p, 1, 1); break; //LD D, A
case 0x58: i_ld_rtor(E_p, B_p, 1, 1); break; //LD E, B
case 0x59: i_ld_rtor(E_p, C_p, 1, 1); break; //LD E, C
case 0x5A: i_ld_rtor(E_p, D_p, 1, 1); break; //LD E, D
case 0x5B: i_ld_rtor(E_p, E_p, 1, 1); break; //LD E, E
case 0x5C: i_ld_rtor(E_p, H_p, 1, 1); break; //LD E, H
case 0x5D: i_ld_rtor(E_p, L_p, 1, 1); break; //LD E, L
case 0x5E: i_ld_rtor(E_p, HL_p, 1, 2); break; //LD E, (HL)
case 0x5F: i_ld_rtor(E_p, A_p, 1, 1); break; //LD E, A
case 0x60: i_ld_rtor(H_p, B_p, 1, 1); break; //LD H, B
case 0x61: i_nop(); break;
case 0x62: i_nop(); break;
case 0x63: i_nop(); break;
case 0x64: i_nop(); break;
case 0x65: i_nop(); break;
case 0x66: i_nop(); break;
case 0x67: i_nop(); break;
case 0x68: i_nop(); break;
case 0x69: i_nop(); break;
case 0x6A: i_nop(); break;
case 0x6B: i_nop(); break;
case 0x6C: i_nop(); break;
case 0x6D: i_nop(); break;
case 0x6E: i_nop(); break;
case 0x6F: i_nop(); break;
case 0x70: i_ld_rtor(HL_p, B_p, 2, 1); break; //LD HL, B
case 0x71: i_nop(); break;
case 0x72: i_nop(); break;
case 0x73: i_nop(); break;
case 0x74: i_nop(); break;
case 0x75: i_nop(); break;
case 0x76: i_nop(); break;
case 0x77: i_ld_hl(A_p); break; //LD (HL), A
case 0x78: i_ld_rtor(A_p, B_p, 1, 1); break; //LD A, B
case 0x79: i_nop(); break;
case 0x7A: i_nop(); break;
case 0x7B: i_nop(); break; //LD A,E
case 0x7C: i_nop(); break;
case 0x7D: i_nop(); break;
case 0x7E: i_nop(); break;
case 0x7F: i_ld_rtor(A_p, A_p, 1, 1); break; //LD A, A
case 0x80: i_accum_add(B_p, 1); break; //ADD A, B
case 0x81: i_accum_add(C_p, 1); break; //ADD A, C
case 0x82: i_accum_add(D_p, 1); break; //ADD A, D
case 0x83: i_accum_add(E_p, 1); break; //ADD A, E
case 0x84: i_accum_add(H_p, 1); break; //ADD A, H
case 0x85: i_accum_add(L_p, 1); break; //ADD A, L
case 0x86: i_accum_add(HL_p, 2); break; //ADD A, (HL)
case 0x87: i_accum_add(A_p, 1); break; //ADD A, A
case 0x88: i_nop(); break;
case 0x89: i_nop(); break;
case 0x8A: i_nop(); break;
case 0x8B: i_nop(); break;
case 0x8C: i_nop(); break;
case 0x8D: i_nop(); break;
case 0x8E: i_nop(); break;
case 0x8F: i_nop(); break;
case 0x90: i_nop(); break;
case 0x91: i_nop(); break;
case 0x92: i_nop(); break;
case 0x93: i_nop(); break;
case 0x94: i_nop(); break;
case 0x95: i_nop(); break;
case 0x96: i_nop(); break;
case 0x97: i_nop(); break;
case 0x98: i_nop(); break;
case 0x99: i_nop(); break;
case 0x9A: i_nop(); break;
case 0x9B: i_nop(); break;
case 0x9C: i_nop(); break;
case 0x9D: i_nop(); break;
case 0x9E: i_nop(); break;
case 0x9F: i_nop(); break;
case 0xA0: i_and(B_p, 1); break; //AND A, B
case 0xA1: i_and(C_p, 1); break; //AND A, C
case 0xA2: i_and(D_p, 1); break; //AND A, D
case 0xA3: i_and(E_p, 1); break; //AND A, E
case 0xA4: i_and(H_p, 1); break; //AND A, H
case 0xA5: i_and(L_p, 1); break; //AND A, L
case 0xA6: i_and(HL_p, 1); break; //AND A, (HL)
case 0xA7: i_and(A_p, 1); break; //AND A, A
case 0xA8: i_xor(B_p, 1); break; //XOR B
case 0xA9: i_xor(C_p, 1); break; //XOR C
case 0xAA: i_xor(D_p, 1); break; //XOR D
case 0xAB: i_xor(E_p, 1); break; //XOR E
case 0xAC: i_xor(H_p, 1); break; //XOR H
case 0xAD: i_xor(L_p, 1); break; //XOR L
case 0xAE: i_xor(HL_p, 2); break; //XOR (HL)
case 0xAF: i_xor(A_p, 1); break; //XOR A
case 0xB0: i_or(B_p, 1); break; //OR B
case 0xB1: i_or(C_p, 1); break; //OR C
case 0xB2: i_or(D_p, 1); break; //OR D
case 0xB3: i_or(E_p, 1); break; //OR E
case 0xB4: i_or(H_p, 1); break; //OR H
case 0xB5: i_or(L_p, 1); break; //OR L
case 0xB6: i_or(HL_p, 2); break; //OR (HL)
case 0xB7: i_or(A_p, 1); break; //OR A
case 0xB8: i_nop(); break; //CP B
case 0xB9: i_nop(); break; //CP C
case 0xBA: i_nop(); break; //CP D
case 0xBB: i_nop(); break; //CP E
case 0xBC: i_nop(); break; //CP H
case 0xBD: i_nop(); break; //CP L
case 0xBE: i_nop(); break; //CP (HL)
case 0xBF: i_nop(); break; //CP A
case 0xC0: if (C_NZ) i_ret(); break; //RET NZ
case 0xC1: i_pop(BC_p); break; //POP BC
case 0xC2: {u8 v = fetch(2).b2; if (C_NZ) PC = v;} break; //JP NZ,a16
case 0xC3: PC = fetch(2).b2; break; //JP a16
case 0xC4: i_nop(); break;
case 0xC5: i_push(BC_p); break; //PUSH BC
case 0xC6: i_nop(); break;
case 0xC7: i_nop(); break;
case 0xC8: if (C_Z) i_ret(); break; //RET Z
case 0xC9: i_ret(); break; //RET
case 0xCA: {u8 v = fetch(2).b2; if (C_Z) PC = v;} break; //JP Z,a16
case 0xCB: i_nop(); break;
case 0xCC: i_nop(); break;
case 0xCD: i_pcall(); break; //CALL nn
case 0xCE: i_nop(); break;
case 0xCF: i_nop(); break;
case 0xD0: if (C_NC) i_ret(); break; //RET NC
case 0xD1: i_pop(DE_p); break; //POP DE
case 0xD2: {u8 v = fetch(2).b2; if (C_NC) PC = v;} break; //JP NC,a16
case 0xD3: i_nop(); break;
case 0xD4: i_nop(); break;
case 0xD5: i_push(DE_p); break; //PUSH DE
case 0xD6: i_nop(); break;
case 0xD7: i_nop(); break;
case 0xD8: if (C_C) i_ret(); break; //RET C
case 0xD9: i_nop(); break;
case 0xDA: {u8 v = fetch(2).b2; if (C_C) PC = v;} break; //JP C,a16
case 0xDB: i_nop(); break;
case 0xDC: i_nop(); break;
case 0xDD: i_nop(); break;
case 0xDE: i_nop(); break;
case 0xDF: i_nop(); break;
case 0xE0: i_ldh(); break; //LDH (a8),A
case 0xE1: i_pop(HL_p); break; //POP HL
case 0xE2: i_ld_ca(); break; //LD (C),A
case 0xE3: i_nop(); break;
case 0xE4: i_nop(); break;
case 0xE5: i_push(HL_p); break; //PUSH HL
case 0xE6: i_nop(); break;
case 0xE7: i_nop(); break;
case 0xE8: i_nop(); break;
case 0xE9: PC = HL; break; //JP (HL)
case 0xEA: i_nop(); break;
case 0xEB: i_nop(); break;
case 0xEC: i_nop(); break;
case 0xED: i_nop(); break;
case 0xEE: i_nop(); break;
case 0xEF: i_nop(); break;
case 0xF0: i_nop(); break;
case 0xF1: i_pop(AF_p); break; //POP AF
case 0xF2: i_nop(); break;
case 0xF3: i_di(); break; //DI
case 0xF4: i_nop(); break;
case 0xF5: i_push(AF_p); break; //PUSH AF
case 0xF6: i_nop(); break;
case 0xF7: i_nop(); break;
case 0xF8: i_nop(); break;
case 0xF9: i_nop(); break;
case 0xFA: i_nop(); break;
case 0xFB: i_ei(); break; //EI
case 0xFC: i_nop(); break;
case 0xFD: i_nop(); break;
case 0xFE: i_nop(); break;
case 0xFF: i_nop(); break;